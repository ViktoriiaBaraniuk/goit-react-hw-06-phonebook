{"version":3,"sources":["components/Section/Section.module.css","components/Filter/Filter.module.css","components/Container/Container.module.css","redux/contacts-actions.jsx","redux/contacts-reducer.jsx","redux/store.jsx","components/Container/Container.jsx","components/Section/Section.jsx","redux/contacts-selectors.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","index.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css"],"names":["module","exports","contactsActions","addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","itemsReducer","createReducer","state","filter","filterReducer","_","combineReducers","items","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","contactsReducer","devTools","process","persistor","persistStore","Container","children","className","s","container","Section","title","section","getContacts","getFilter","getVisibleContacts","normalizedFilter","toLowerCase","contact","includes","ContactForm","useState","setName","setNumber","useSelector","dispatch","useDispatch","handleChange","e","currentTarget","value","reset","onSubmit","preventDefault","find","alert","form","type","placeholder","onChange","button","ContactList","list","map","listItem","itemName","onClick","deleteBtn","Filter","filterForm","target","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.61d6215d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__22VyK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__750uk\",\"filterForm\":\"Filter_filterForm__2Q_C6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__NkRDs\"};","import shortid from 'shortid';\nimport { createAction } from '@reduxjs/toolkit';\n\nconst addContact = createAction('contact/add', (name, number) => ({\n  payload: {\n    id: shortid.generate(),\n    name,\n    number,\n  },\n}));\nconst deleteContact = createAction('contact/delete');\nconst changeFilter = createAction('contact/changeFilter');\n\nconst contactsActions = { addContact, deleteContact, changeFilter };\n\nexport default contactsActions;\n\n/* redux\n\nimport shortid from 'shortid';\nimport types from './contacts-types';\n\nconst addContact = (name, number) => ({\n    type: types.ADD,\n    payload: {\n        id: shortid.generate(),\n        name,\n        number,\n    }\n});\n\nconst deleteContact = contactId => ({\n     type: types.DELETE,\n     payload: contactId,\n});\n\nconst changeFilter = value => ({\n     type: types.CHANGE_FILTER,\n     payload: value,\n})\n\nconst contsctsActions = { addContact, deleteContact, changeFilter };\n\nexport default contactsActions;\n */\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport contactsActions from './contacts-actions';\n\nconst defaultContacts = [\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n];\nconst itemsReducer = createReducer(defaultContacts, {\n  [contactsActions.addContact]: (state, { payload }) => [...state, payload],\n  [contactsActions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filterReducer = createReducer('', {\n  [contactsActions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items: itemsReducer,\n  filter: filterReducer,\n});\n\n/* import { combineReducers } from 'redux';\n import types from './contacts-types';\n\nconst defaultContacts = [\n   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n ]\nconst itemsReducer = (state = defaultContacts, { type, payload }) => {\n    switch (type) {\n      case types.ADD:\n             return [...state, payload];\n\n      case types.DELETE:\n            return state.filter(({ id }) => id !== payload)\n\n      default:\n             return state;\n     }\n\n };\n\nconst filterReducer = (state = '', { type, payload }) => {\n     switch (type) {\n        case types.CHANGE_FILTER:\n             return payload;\n\n        default:\n            return state;\n     }\n };\n\nexport default combineReducers({\n     items: itemsReducer,\n     filter: filterReducer,\n }) */\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport contactsReducer from './contacts-reducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nexport const store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport const persistor = persistStore(store);\n\n/*  redux\n\n import { createStore } from 'redux';\n import { combineReducers } from 'redux';\n import { composeWithDevTools } from 'redux-devtools-extension';\n import contactsReducer from './contacts-reducer';\n\n const rootReducer = combineReducers({\n   contacts: contactsReducer,\n })\n\n const store = createStore(rootReducer, composeWithDevTools());\n\n export default store;\n */\n","import PropTypes from 'prop-types';\nimport s from './Container.module.css';\n\nconst Container = ({ children }) => (\n  <div className={s.container}>{children}</div>\n);\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Container;\n","import PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nfunction Section({ title, children }) {\n  return (\n    <div className={s.section}>\n      <h2 className={s.title}>{title}</h2>\n      {children}\n    </div>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter),\n  );\n};\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from '../../redux/contacts-selectors';\nimport contactsActions from '../../redux/contacts-actions';\nimport s from './ContactForm.module.css';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n  const contactCheck = () => {\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n      return true;\n    }\n    if (name === '' || number === '') {\n      alert('Please fill in all the fields');\n      return true;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (contactCheck()) {\n      reset();\n      return;\n    }\n\n    dispatch(contactsActions.addContact(name, number));\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={s.form}>\n      <label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Enter your name\"\n          value={name}\n          onChange={handleChange}\n          className={s.name}\n        />\n      </label>\n      <label>\n        Number\n        <input\n          type=\"text\"\n          name=\"number\"\n          placeholder=\"Enter your mobile number\"\n          value={number}\n          onChange={handleChange}\n          className={s.number}\n        />\n      </label>\n\n      <button type=\"submit\" className={s.button}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n\n/* redux */\n\n/* import { useState } from 'react';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-actions';\nimport PropTypes from 'prop-types';\nimport s from './ContactForm.module.css';\n\nfunction ContactForm({ contacts, onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n  const contactCheck = () => {\n    if (\n      contacts.find(\n        contact => name.toLowerCase() === contact.name.toLowerCase(),\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n      return true;\n    }\n    if (name === '' || number === '') {\n      alert('Please fill in all the fields');\n      return true;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (contactCheck()) {\n      reset();\n      return;\n    }\n\n    onSubmit(name, number);\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={s.form}>\n      <label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Enter your name\"\n          value={name}\n          onChange={handleChange}\n          className={s.name}\n        />\n      </label>\n      <label>\n        Number\n        <input\n          type=\"text\"\n          name=\"number\"\n          placeholder=\"Enter your mobile number\"\n          value={number}\n          onChange={handleChange}\n          className={s.number}\n        />\n      </label>\n\n      <button type=\"submit\" className={s.button}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\n\n\nconst mapStateToProps = state => ({\n   contacts: state.contacts.items\n });\n\n const mapDispatchToProps = dispatch => ({\n onSubmit: (name, number) => dispatch(contactsActions.addContact(name, number)),\n })\n\n export default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n */\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getVisibleContacts } from '../../redux/contacts-selectors';\nimport contactsActions from '../../redux/contacts-actions';\nimport s from './ContactList.module.css';\n\nfunction ContactList() {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className={s.listItem}>\n          <p className={s.itemName}>\n            {name}: {number}\n          </p>\n          <button\n            type=\"button\"\n            onClick={() => dispatch(contactsActions.deleteContact(id))}\n            className={s.deleteBtn}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default ContactList;\n\n/* import { connect } from 'react-redux';\nimport contactsActions from '../../redux/contacts-actions';\nimport PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\n\nfunction ContactList({ contacts, onDeleteContact }) {\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className={s.listItem}>\n          <p className={s.itemName}>\n            {name}: {number}\n          </p>\n          <button\n            type=\"button\"\n            onClick={() => onDeleteContact(id)}\n            className={s.deleteBtn}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = ({ contacts: {items, filter} }) => ({\n     contacts: getVisibleContacts(items, filter),\n });\n const mapDispatchToProps = dispatch => ({\n onDeleteContact: (id) => dispatch(contactsActions.deleteContact(id)),\n })\n\n export default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\n*/\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from '../../redux/contacts-selectors';\nimport contactsActions from '../../redux/contacts-actions';\nimport s from './Filter.module.css';\n\nfunction Filter() {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label className={s.filterForm}>\n      Find contacts by name\n      <input\n        type=\"text\"\n        value={value}\n        onChange={e => dispatch(contactsActions.changeFilter(e.target.value))}\n        className={s.filter}\n      />\n    </label>\n  );\n}\n\nexport default Filter;\n\n/* import contactsActions from '../../redux/contacts-actions';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport s from './Filter.module.css';\n\nfunction Filter({ value, onChange }) {\n  return (\n    <label className={s.filterForm}>\n      Find contacts by name\n      <input\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n        className={s.filter}\n      />\n    </label>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n   value: state.contacts.filter\n });\n\n const mapDispatchToProps = dispatch => ({\n onChange: (e) => dispatch(contactsActions.changeFilter(e.currentTarget.value)),\n })\n\n export default connect(mapStateToProps, mapDispatchToProps)(Filter);\n */\n","import Container from './components/Container/Container';\nimport Section from './components/Section/Section';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\nexport default function App() {\n  return (\n    <Container>\n      <Section title=\"Phonebook\">\n        <ContactForm />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter />\n        <ContactList />\n      </Section>\n    </Container>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1VBRZ\",\"name\":\"ContactForm_name__1mw4v\",\"number\":\"ContactForm_number__3E2mg\",\"button\":\"ContactForm_button__SByIH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3K0Xq\",\"listItem\":\"ContactList_listItem__CIJ36\",\"deleteBtn\":\"ContactList_deleteBtn__wBACx\",\"itemName\":\"ContactList_itemName__9_i8k\"};"],"sourceRoot":""}